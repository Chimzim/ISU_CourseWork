package hw4;

import api.AbstractGame;
import api.Generator;
import api.Position;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class BlockAddiction extends AbstractGame {
	public BlockAddiction(int hieght, int width, Generator gen, int preFillRows) {
		super(hieght, width, gen);
		if (preFillRows > 0) {
			int positiveRows = preFillRows;
			for(int i = hieght - 1; i > (hieght-1) - preFillRows; i--){
				for(int j = 0; j < width; j++) {
					if((i - positiveRows) % 2 == 0 && j % 2 == 0) {
						super.setBlock(i, j, gen.randomIcon());
					}
					if((i - positiveRows) % 2 == 1) {
						if(j % 2 == 1) {
							super.setBlock(i, j, gen.randomIcon());
						}
					}	
				}
				
			}
		}
	}

	public BlockAddiction(int hieght, int width, Generator gen) {
		super(hieght, width, gen);
	}

	@Override
	public List<Position> determinePositionsToCollapse() {
		ArrayList<Position> temp = new ArrayList<>();
		ArrayList<Position> ableToCollapse = new ArrayList<Position>();
		for(int i = 0; i < getHeight(); ++i) {
			if(isRowFilled(i)) {
				for(int j = 0; j < getWidth(); ++j) {
					temp.add(new Position(i, j));
				}
			}
		}
		for (int row = 0; row < getHeight(); ++row) {
			for (int col = 0; col < getWidth(); ++col) {
				if (getIcon(row, col) != null) {
					ArrayList<Position> toCollapse = new ArrayList<>();
					try {
						if (getIcon(row, col).equals(getIcon(row+1, col))) {
							toCollapse.add(new Position(row+1, col));
						}
					} catch (IndexOutOfBoundsException e) {

					}
					try {
						if (getIcon(row, col).equals(getIcon(row, col+1))) {
							toCollapse.add(new Position(row, col+1));
						}
					} catch (IndexOutOfBoundsException e) {

					}
					try {
						if (getIcon(row, col).equals(getIcon(row, col-1))) {
							toCollapse.add(new Position(row, col-1));
						}
					} catch (IndexOutOfBoundsException e) {

					}
					try {
						if (getIcon(row, col).equals(getIcon(row-1, col))) {
							toCollapse.add(new Position(row-1, col));
						}
					} catch (IndexOutOfBoundsException e) {

					}
					if (toCollapse.size() >= 2) {
						ableToCollapse.addAll(toCollapse);
						ableToCollapse.add(new Position(row, col));
					}
				}
			}
		}

		for (int i = 0; i < temp.size(); i++) {
			if (!ableToCollapse.contains(temp.get(i))) {
				ableToCollapse.add(temp.get(i));
			}
		}
		Collections.sort(ableToCollapse);
		return ableToCollapse;

	}

	private boolean isRowFilled(int row) {
		for (int col = 0; col < getWidth(); ++col) {
			if (getIcon(row, col) == null) {
				return false;
			}
		}
		return true;
	}

}
