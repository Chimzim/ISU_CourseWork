package hw3;
import java.util.ArrayList;
import java.util.Scanner;
import api.Instruction;
import api.SymbolTable;
public class CS227Asm {
	private SymbolTable ComputerLabel = new SymbolTable();
	private SymbolTable ComputerData = new SymbolTable();
	private ArrayList<Instruction> ComputerInstruction;
	private ArrayList<String> rawData;
	int keyAdress;
	/**

	 * Constructs an assembler for the given assembly language program, given as an ArrayList of strings (one per line of the program). Initially both symbol tables and the instruction stream are empty.

	 * @param program

	 */

	public CS227Asm(java.util.ArrayList<java.lang.String> program) {
		rawData = program;
	}

	/**

	 * Returns the symbol table for data (variables).

	 * @return

	 */

	public SymbolTable getData() {

		return ComputerData;

		

	}

	/**

	 * Returns the symbol table for labels (jump targets).

	 * @return

	 */

	public SymbolTable getLabels() {

		return ComputerLabel;

	}

	/**

	 * Returns the instruction stream. The index of each instruction in the list is its memory location in the generated code.

	 * @return

	 */

	public java.util.ArrayList<Instruction> getInstructionStream(){

		return null;

	}

	/**

	 * Assembles the source program represented by this assembler instance and returns the generated machine code and data as an array of strings.

	 * @return

	 */

	public java.util.ArrayList<java.lang.String> assemble(){
		parseData();
		 parseLabels();
		 parseInstructions();
		 setOperandValues();
		 addLabelAnnotations();
		 return writeCode();
	}

	/**

	 * Creates the symbol table for the data section of this assembler's program.

	 */

	public void parseData() {
		int dataValue;
		String dataSet = "";
		for(int i = 0; i < rawData.size(); i++) {
			dataSet = rawData.get(i);
			Scanner in = new Scanner(dataSet);
			String dataName = in.next();
			if(!dataName.equals("data:")){
				if(!dataName.equals("labels:")) {
					dataValue = in.nextInt();
					ComputerData.add(dataName, dataValue);
				}
		 	}
			else if(dataName.equals("labels:")) {
				keyAdress = i;
				break;
			}
		}
		

	}

		

	

	/**

	 * Creates the symbol table for the label section of this assembler's program, leaving all label values as zeros.

	 */

	public void parseLabels() {
		String dataName = "";
		for(int i = keyAdress; i < rawData.size(); i++) {
			String dataSet = rawData.get(i);
			Scanner in = new Scanner(dataSet);
			if(!dataSet.equals("labels:")){
				dataName = in.next();
				if(!dataName.equals("instructions:")) {
					ComputerLabel.add(dataName, 0);
				}
		 	}
			else if(dataName.equals("instructions:")) {
				keyAdress = i;
				break;
			}
		}

	}

	/**

	 * Creates instruction stream from the instruction section of this assembler's program and fills in label addresses in the symbol table for labels.

	 */

	public void parseInstructions() {
	/*	int countForInstructions = 0;
		for(int i = keyAdress; i < rawData.size(); i++) {
			String dataSet = rawData.get(i);
			Scanner in = new Scanner(dataSet);
			String dataInstruct = in.next();
			if(!in.equals("instructions:") || !in.equals("instructions:")){
				String dataName = "";
				if(in.hasNext()) {
					dataName = in.next();
				
				if(!in.equals("instruction:")) {
					if(dataInstruct == "read") {
						ComputerInstruction.add(dataName, 1000);
						countForInstructions++;
					}
					else if(dataInstruct == "write" ) {
						ComputerInstruction.add(dataName, 20000);
						countForInstructions++;
					}
					else if(dataInstruct == "load") {
						ComputerInstruction.add(dataName, 3000);
						countForInstructions++;
					}
					else if(dataInstruct == "store") {
						ComputerInstruction.add(dataName, 4000);
						countForInstructions++;
					}
					else if(dataInstruct == "add") {
						ComputerInstruction.add(dataName, 5000);
						countForInstructions++;
					}
					else if(dataInstruct == "sub") {
						ComputerInstruction.add(dataName, 5100);
						countForInstructions++;
					}
					else if(dataInstruct == "div") {
						ComputerInstruction.add(dataName, 5200);
						countForInstructions++;
					}
					else if(dataInstruct == "mod") {
						ComputerInstruction.add(dataName, 5300);
						countForInstructions++;
					}
					else if(dataInstruct == "mul") {
						ComputerInstruction.add(dataName, 5400);
						countForInstructions++;
					}
					else if(dataInstruct == "jump") {
						ComputerInstruction.add(dataName, 6000);
						countForInstructions++;
					}
					else if(dataInstruct == "jumpn") {
						ComputerInstruction.add(dataName, 6100);
						countForInstructions++;
					}
					else if(dataInstruct == "jumpz") {
						ComputerInstruction.add(dataName, 6300);
						countForInstructions++;
					}
					else if(dataInstruct == "halt") {
						ComputerInstruction.add(dataName, 8000);
						countForInstructions++;
					}
					else {
						ComputerLabel.findByName(dataName).setValue(countForInstructions);
					}
					
				}
		 	}
			else if(in.equals("instructions:")) {
				break;
			}
		} */
	}

	/**

	 * Fills in the correct operand value for all instructions (either a data address or jump target address, depending on the instruction).

	 */

	public void setOperandValues() {
	/*	for(int i = 0; i < ComputerInstruction.size(); i++) {
			if(ComputerInstruction.getByIndex(i).getValue() == 6000 || 
				ComputerInstruction.getByIndex(i).getValue() == 6100 ||
				ComputerInstruction.getByIndex(i).getValue() == 6300) {
				int temp = ComputerLabel.findByName(ComputerInstruction.getByIndex(i).getName()).getValue();
				ComputerInstruction.getByIndex(i).setValue(6000+temp);
			}
		} */
	}

	/**

	 * For each instruction in the instruction stream that is a jump target, adds the label to the instruction's description. (See the method addLabelToDescription in the Instruction class.)

	 */

	public void addLabelAnnotations() {

		

	}

	/**

	 * Generates the machine code and data for this assembler's program, terminated by the string "-99999". Strings for instructions are produced by the Instruction method toString, and strings for data have the value formatted as a four-digit signed integer, followed by a space, followed by the variable name.

	 * @return

	 */

	public java.util.ArrayList<java.lang.String> writeCode(){

		return null;

		

	}
}