package cs228hw2.test;

import java.io.Reader;
import java.util.LinkedList;

public class AmusingPreciseNumber {
	LinkedList<Integer> myNumbPrior = new LinkedList<>();
	LinkedList<Integer> myNumbAfter = new LinkedList<>();
	LinkedList<Character> myStringNumb = new LinkedList<>();
	
	String stringNumb;
	public AmusingPreciseNumber(Reader r ) {
		
	}
	
	public AmusingPreciseNumber(int numb) {
		int reset = 0;
		if(numb < 0 ) {
			numb = numb * -1;
			reset = 1;
		}
		while(numb > 0) {
			myNumbPrior.add(0, numb%10);
			numb = numb/10;
		}
		if(reset == 1) {
			myNumbPrior.set(0, myNumbPrior.get(0)*-1);
		}
	}
	
	public AmusingPreciseNumber(String numb) {
		stringNumb = numb;
	}
	
	public AmusingPreciseNumber(AmusingPreciseNumber numb) {
		int negative = 0;
		int i = 0;
			while(!numb.myStringNumb.get(i).equals('.')) {
				if(numb.myStringNumb.get(i) == '-') {
					negative = 1;
					i++;
				}
				if(negative == 1) {
					myNumbPrior.add(Character.getNumericValue(numb.myStringNumb.get(i)*-1));
				i++;
				}
				else {
					myNumbPrior.add(Character.getNumericValue(numb.myStringNumb.get(i)));
					i++;
			}
		}
			i++;
			while(i < numb.myStringNumb.size()) {
				myNumbAfter.add(Character.getNumericValue(numb.myStringNumb.get(i)));
				i++;
			}
		
	}
	
	public void add(AmusingPreciseNumber numb) {
		LinkedList<Integer> additionB = new LinkedList<>();
		LinkedList<Integer> additionA = new LinkedList<>();
		
		boolean subtractionNeed = false;
		boolean negative = false;
		if(myNumbPrior.size() > additionB.size()) {
			while(myNumbPrior.size() != additionB.size()) {
				additionB.add(0, 0);
			}
		}
		if(myNumbPrior.size() < additionB.size()) {
			while(myNumbPrior.size() != additionB.size()) {
				myNumbPrior.add(0,0);
			}
		}
		if(myNumbAfter.size() > additionA.size()) {
			while(myNumbAfter.size() != additionA.size()) {
				additionA.add(0);
			}
		}
		if(myNumbAfter.size() < additionA.size()) {
			while(myNumbAfter.size() != additionA.size()) {
				myNumbAfter.add(0);
			}
		}
		if(additionB.get(0) < 0 && myNumbPrior.get(0) > 0) {
			subtractionNeed = true;
			if(additionB.get(0)*-1 > myNumbPrior.get(0)) {
				negative = true;
				additionB.set(0, additionB.get(0)*-1);
			}
			for(int i = myNumbAfter.size()-1; i >= 0; i--) {
				if(myNumbAfter.get(i) > additionA.get(i) && i != 0) {
					additionA.set(i, additionA.get(i)+10);
					additionA.set(i-1, additionA.get(i-1)-1);
				}
				else if(myNumbAfter.get(i) > additionA.get(i) && i == 0) {
					additionA.set(i, additionA.get(i)+10);
					additionB.set(additionB.size()-1, additionB.get(additionB.size()-1)-1);
				}
				myNumbAfter.set(i, additionA.get(i)-myNumbAfter.get(i));
			}
			for(int i = myNumbPrior.size()-1; i >= 0; i--) {
				if(myNumbAfter.get(i) > additionB.get(i) && i != 0) {
					additionB.set(i, additionB.get(i)+10);
					additionB.set(i-1, additionB.get(i-1)-1);
				}
				myNumbPrior.set(i, additionA.get(i)-myNumbPrior.get(i));
			}
			myNumbPrior.set(0, myNumbPrior.get(0)*-1);
		}
		else if(additionB.get(0) > 0 && myNumbPrior.get(0) < 0) {
			subtractionNeed = true;
			if(additionB.get(0) < myNumbPrior.get(0)*-1) {
				negative = true;
			}
			for(int i = myNumbAfter.size()- 1; i >= 0; i--) {
				if(additionA.get(i) > myNumbAfter.get(i) && i != 0) {
					myNumbAfter.set(i, myNumbAfter.get(i)+10);
					myNumbAfter.set(i-1, myNumbAfter.get(i-1)-1);
				}
				else if(additionA.get(i) > myNumbAfter.get(i) && i == 0) {
					myNumbAfter.set(i, myNumbAfter.get(i)+10);
					myNumbPrior.set(myNumbPrior.size()-1, myNumbPrior.get(myNumbPrior.size()-1)-1);
				}
				myNumbPrior.set(i, myNumbAfter.get(i)-additionA.get(i));
			}
			for(int i = myNumbPrior.size()- 1; i >= 0; i--) {
				if(additionB.get(i) > myNumbPrior.get(i) && i != 0) {
					myNumbPrior.set(i, myNumbPrior.get(i)+10);
					myNumbPrior.set(i-1, myNumbPrior.get(i-1)-1);
				}
				myNumbPrior.set(i, myNumbPrior.get(i)-additionB.get(i));
			}
			myNumbPrior.set(0, myNumbPrior.get(0)*-1);
		}
		else if(additionB.get(0) > 0 && myNumbPrior.get(0) < 0) {
			if(additionB.get(0) > myNumbPrior.get(0)*-1) {
				for(int i = myNumbAfter.size()-1; i >= 0; i--) {
					if(myNumbAfter.get(i) > additionA.get(i) && i != 0) {
						additionA.set(i, additionA.get(i)+10);
						additionA.set(i-1, additionA.get(i-1)-1);
					}
					else if(myNumbAfter.get(i) > additionA.get(i) && i == 0) {
						additionA.set(i, additionA.get(i)+10);
						additionB.set(additionB.size()-1, additionB.get(additionB.size()-1)-1);
					}
					myNumbAfter.set(i, additionA.get(i)-myNumbAfter.get(i));
				}
				for(int i = myNumbPrior.size()-1; i >= 0; i--) {
					if(myNumbPrior.get(i) > additionB.get(i) && i != 0) {
						additionB.set(i, additionB.get(i)+10);
						additionB.set(i-1, additionB.get(i-1)-1);
					}
					myNumbPrior.set(i, additionB.get(i)-myNumbPrior.get(i));
				}
			}
		}
		else if(additionB.get(0) < 0 && myNumbPrior.get(0) > 0) {
			if(additionB.get(0)*-1 < myNumbPrior.get(0)) {
				for(int i = myNumbAfter.size()-1; i >= 0; i--) {
					if(additionA.get(i) > myNumbAfter.get(i) && i != 0) {
						myNumbAfter.set(i, myNumbAfter.get(i)+10);
						myNumbAfter.set(i-1, myNumbAfter.get(i-1)-1);
					}
					else if(additionA.get(i) > myNumbAfter.get(i) && i == 0) {
						myNumbAfter.set(i, myNumbAfter.get(i)+10);
						myNumbPrior.set(myNumbPrior.size()-1, myNumbPrior.get(myNumbPrior.size()-1)-1);
					}
					myNumbAfter.set(i, myNumbAfter.get(i)-additionA.get(i));
				}
				for(int i = myNumbPrior.size()-1; i >= 0; i--) {
					if(additionB.get(i) > myNumbPrior.get(i)) {
						myNumbPrior.set(i, myNumbPrior.get(i)+10);
						myNumbPrior.set(i-1, myNumbPrior.get(i-1)-1);
					}
					myNumbPrior.set(i, myNumbPrior.get(i)-additionB.get(i));
				}
			}
		}
		else {
			for(int i = myNumbAfter.size()-1; i >= 0; i--) {
				myNumbAfter.set(i, myNumbAfter.get(i)+additionA.get(i));
				if(myNumbAfter.get(i) >= 10 && i != 0) {
					myNumbAfter.set(i, myNumbAfter.get(i)%10);
					myNumbAfter.set(i-1, myNumbAfter.get(i)+1);
				}
				else if(myNumbAfter.get(i) >= 10 && i == 0) {
					myNumbAfter.set(i, myNumbAfter.get(i)%10);
					myNumbPrior.set(myNumbPrior.size()-1, myNumbPrior.get(myNumbPrior.size()-1)+1);
				}
			}
			for(int i = myNumbPrior.size()-1; i >= 0; i--) {
				myNumbPrior.set(i, myNumbAfter.get(i)+additionA.get(i));
				if(myNumbAfter.get(i) >= 10 && i != 1) {
					myNumbPrior.set(i, myNumbAfter.get(i)%10);
					myNumbPrior.set(i-1, myNumbAfter.get(i)+1);
				}
				else if(myNumbAfter.get(i) >= 10 && i == 1) {
					if(myNumbPrior.get(0) < 0) {
						myNumbPrior.set(i, myNumbAfter.get(i)%10);
						myNumbPrior.set(i-1, myNumbAfter.get(i)-1);
					}
					else {
						myNumbPrior.set(i, myNumbAfter.get(i)%10);
						myNumbPrior.set(i-1, myNumbAfter.get(i)+1);
					}
				}
				else if(myNumbAfter.get(i) >= 10 && i == 0) {
					myNumbPrior.set(i, myNumbAfter.get(i)%10);
					if(negative == true) {
						myNumbPrior.add(0, -1);
					}
					else {
						myNumbPrior.add(0, 1);
					}
				}
			}
		}
	}

	public static AmusingPreciseNumber add(AmusingPreciseNumber numb1, AmusingPreciseNumber numb2) {
		LinkedList<Integer> numb1B = new LinkedList<>();
		LinkedList<Integer> numb1A = new LinkedList<>();
		LinkedList<Integer> numb2B = new LinkedList<>();
		LinkedList<Integer> numb2A = new LinkedList<>();
		AmusingPreciseNumber temp = new AmusingPreciseNumber(numb1);
		boolean found = false;
		boolean negative = false;
		for(int i = 0; i <numb1.myStringNumb.size()-1; i++) {
			if(numb1.myStringNumb.get(i) == '.') {
				found = true;
			}
			if(found == false) {
				numb1B.add(Character.getNumericValue(numb1.myStringNumb.get(i)));
			}
			else if(found == true) {
				numb1A.add(Character.getNumericValue(numb1.myStringNumb.get(i)));
			}
		}
		found = false;
		for(int i = 0; i <numb1.myStringNumb.size()-1; i++) {
			if(numb1.myStringNumb.get(i) == '.') {
				found = true;
			}
			if(found == false) {
				numb2B.add(Character.getNumericValue(numb1.myStringNumb.get(i)));
			}
			else if(found == true) {
				numb2A.add(Character.getNumericValue(numb1.myStringNumb.get(i)));
			}
		}
		if(numb1B.size() > numb2B.size()) {
			while(numb2B.size() != numb1B.size()) {
				numb2B.add(0, 0);
			}
		}
		if(numb1B.size() < numb2B.size()) {
			while(numb1B.size() != numb2B.size()) {
				numb1B.add(0,0);
			}
		}
		if(numb1A.size() > numb2A.size()) {
			while(numb1A.size() != numb2A.size()) {
				numb2A.add(0,0);
			}
		}
		if(numb1A.size() < numb2A.size()) {
			while(numb2A.size() != numb1A.size()) {
				numb1A.add(0,0);
			}
		}
		if(numb1B.get(0) < 0 && numb2B.get(0) > 0) {
			if(numb1A.get(0)*-1 > numb2A.get(0)) {
				numb1B.set(0, numb1B.get(0)*-1);
				for(int i = numb2A.size()-1; i >= 0; i--) {
					if(numb2A.get(i) > numb1A.get(i) && i != 0) {
						numb1A.set(i, numb1A.get(i)+10);
						numb1A.set(i-1, numb1A.get(i-1)-1);
					}
					else if(numb2A.get(i) > numb1A.get(i) && i == 0) {
						numb1A.set(i, numb1A.get(i)+10);
						numb1B.set(numb1B.size()-1, numb1B.get(numb1B.size()-1)-1);
					}
					numb2A.set(i, numb1A.get(i)-numb2A.get(i));
				}
				for(int i = numb2B.size()-1; i >= 0; i--) {
					if(numb2A.get(i) > numb1B.get(i) && i != 0) {
						numb1B.set(i, numb1B.get(i)+10);
						numb1B.set(i-1, numb1B.get(i-1)-1);
					}
					numb2B.set(i, numb1A.get(i)-numb2B.get(i));
				}
				numb2B.set(0, numb2B.get(0)*-1);
				}
		}
		else if(numb1B.get(0) > 0 && numb2B.get(0) < 0) {
			if(numb1B.get(0) < numb2B.get(0)*-1) {
				for(int i = numb2A.size()- 1; i >= 0; i--) {
					if(numb1A.get(i) > numb2A.get(i) && i != 0) {
						numb2A.set(i, numb2A.get(i)+10);
						numb2A.set(i-1, numb2A.get(i-1)-1);
					}
					else if(numb1A.get(i) > numb2A.get(i) && i == 0) {
						numb2A.set(i, numb2A.get(i)+10);
						numb2B.set(numb2B.size()-1, numb2B.get(numb2B.size()-1)-1);
					}
					numb2B.set(i, numb2A.get(i)-numb1A.get(i));
				}
				for(int i = numb2B.size()- 1; i >= 0; i--) {
					if(numb1B.get(i) > numb2B.get(i) && i != 0) {
						numb2B.set(i, numb2B.get(i)+10);
						numb2B.set(i-1, numb2B.get(i-1)-1);
					}
					numb2B.set(i, numb2B.get(i)-numb1B.get(i));
				}
				numb2B.set(0, numb2B.get(0)*-1);
				}
		}
		else if(numb1B.get(0) > 0 && numb2B.get(0) < 0) {
			if(numb1B.get(0) > numb2B.get(0)*-1) {
				for(int i = numb2A.size()-1; i >= 0; i--) {
					if(numb2A.get(i) > numb1A.get(i) && i != 0) {
						numb1A.set(i, numb1A.get(i)+10);
						numb1A.set(i-1, numb1A.get(i-1)-1);
					}
					else if(numb2A.get(i) > numb1A.get(i) && i == 0) {
						numb1A.set(i, numb1A.get(i)+10);
						numb1B.set(numb1B.size()-1, numb1B.get(numb1B.size()-1)-1);
					}
					numb2A.set(i, numb1A.get(i)-numb2A.get(i));
				}
				for(int i = numb2B.size()-1; i >= 0; i--) {
					if(numb2B.get(i) > numb1B.get(i) && i != 0) {
						numb1B.set(i, numb1B.get(i)+10);
						numb1B.set(i-1, numb1B.get(i-1)-1);
					}
					numb2B.set(i, numb1B.get(i)-numb2B.get(i));
				}
			}
		}
		else if(numb1B.get(0) < 0 && numb2B.get(0) > 0) {
			if(numb1B.get(0)*-1 < numb2B.get(0)) {
				for(int i = numb2A.size()-1; i >= 0; i--) {
					if(numb1A.get(i) > numb2A.get(i) && i != 0) {
						numb2A.set(i, numb2A.get(i)+10);
						numb2A.set(i-1, numb2A.get(i-1)-1);
					}
					else if(numb1A.get(i) > numb2A.get(i) && i == 0) {
						numb2A.set(i, numb2A.get(i)+10);
						numb2B.set(numb2B.size()-1, numb2B.get(numb2B.size()-1)-1);
					}
					numb2A.set(i, numb2A.get(i)-numb1A.get(i));
				}
				for(int i = numb2B.size()-1; i >= 0; i--) {
					if(numb1B.get(i) > numb2B.get(i)) {
						numb2B.set(i, numb2B.get(i)+10);
						numb2B.set(i-1, numb2B.get(i-1)-1);
					}
					numb2B.set(i, numb2B.get(i)-numb1B.get(i));
				}
			}
		}
		else {
			for(int i = numb2A.size()-1; i >= 0; i--) {
				numb2A.set(i, numb2A.get(i)+numb1A.get(i));
				if(numb2A.get(i) >= 10 && i != 0) {
					numb2A.set(i, numb2A.get(i)%10);
					numb2A.set(i-1, numb2A.get(i)+1);
				}
				else if(numb2A.get(i) >= 10 && i == 0) {
					numb2A.set(i, numb2A.get(i)%10);
					numb2B.set(numb2B.size()-1, numb2B.get(numb2B.size()-1)+1);
				}
			}
			for(int i = numb2B.size()-1; i >= 0; i--) {
				numb2B.set(i, numb2A.get(i)+numb1A.get(i));
				if(numb2A.get(i) >= 10 && i != 1) {
					numb2B.set(i, numb2A.get(i)%10);
					numb2B.set(i-1, numb2A.get(i)+1);
				}
				else if(numb2A.get(i) >= 10 && i == 1) {
					if(numb2B.get(0) < 0) {
						numb2B.set(i, numb2A.get(i)%10);
						numb2B.set(i-1, numb2A.get(i)-1);
						negative = true;
					}
					else {
						numb2B.set(i, numb2A.get(i)%10);
						numb2B.set(i-1, numb2A.get(i)+1);
					}
				}
					else if(numb2A.get(i) >= 10 && i == 0) {
					numb2B.set(i, numb2A.get(i)%10);
					if(negative == true) {
						numb2B.add(0, -1);
					}
					else {
						numb2B.add(0, 1);
					}
					}
				}
			}
		for(int i = )
		}
	}
