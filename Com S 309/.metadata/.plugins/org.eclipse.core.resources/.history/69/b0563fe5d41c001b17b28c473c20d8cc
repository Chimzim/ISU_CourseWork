package com.example.test;

import static org.junit.Assert.assertThat;

import java.util.ArrayList;

import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.swing.Spring;

//Import Java libraries
import java.util.List;
import java.util.ArrayList;

//import junit/spring tests
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.springframework.beans.factory.annotation.Autowired;


@RunWith(SpringRunner.class)
public class mockitoTest  {
	
	private Controller testController;
	
	private KeyGenerator testKey = KeyGenerator.getInstance("AES");
	private SecretKey testSecKey = testKey.generateKey();
	private byte[] testEncrypt;
	
	private crypto testCrypto = new crypto("Demo 3 testing encrypting and deycrypting", testSecKey);
	
	@Test
	public void testMenuSetup() {
		testController.menuItems("Conversations");
		ArrayList<String> tacoPizza = new ArrayList<String>();
		tacoPizza.add("Taco Pizza");
		testController.addItemsToCart("Taco Pizza");
		
		assert(testController.getCart()).equals(tacoPizza);
		assert(testController.getRestauarnt()).equals("Conversations");
	}
	
	@Test
	public void testMessageEncrpt() {
		testEncrypt = testCrypto.Encryption();
		
		assert(testEncrypt).equals("[B@61a52fbd");
		
	}
	
	@Test
	public void testMessageDecryption() {
		String testing = testCrypto.Decryption(testEncrypt);
		
		assert(testing).matches("Demo 3 testing encrypting and deycrypting");
		
	}
	
	@Test
	public void testRemoveItemFromCart() {
		testController.removeItemFromCart("Taco Pizza");
		
		assert(testController.getCart()).isEmpty();
	}
	
	@Test 
	public void testCancelOrder() {
		testController.addItemsToCart("Chicken Strips");
		testController.addItemsToCart("Sunrise Burger");
		testController.addItemsToCart("Salad");
		
		testController.cancelOrder();
		Double zero = 0.0;
		
		assert(testController.getCart()).isEmpty();
		assert(testController.getOrderSummary()).isEmpty();
		assert(testController.getOrderTotal()).equals(zero);
	}
	
	@Test
	public void testDayOfTheWeek() {
		testController.updateDayOfWeek();
		
		assert(testController.getDayOfWeek()).equals("Friday");
		
	}
}
