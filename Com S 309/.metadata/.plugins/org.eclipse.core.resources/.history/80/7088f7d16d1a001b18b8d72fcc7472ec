package com.example.test;


import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.Properties;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.net.ssl.SSLSession;

import com.sun.xml.internal.org.jvnet.mimepull.MIMEMessage;


public class EmailService extends Controller{
	Controller myController = new Controller();
  	private Properties myProps;
  	private String isuDeliveryEmail = "afakeemailaddress@gmail.com";
  	private String userEmailAddress;
  	private String serverType = "localhost";
  	
  	public EmailService(String sendToAddress) {
  		myProps = System.getProperties();
  		userEmailAddress = sendToAddress;
  		String messageBody = myController.getOrderSummary();
  		String subject = "Dear xxxx, Thank you for ordering from " + myController.getRestauarnt() + " Through ISU Delivery Service";
  	}
  	
  	public void SendEmail() {
  		//Defaults on port 25
  		myProps.setProperty("mail.smtp.host", serverType);
  		
  	}
	
   private Cipher CipherAES128;
   private KeyGenerator AESkey;
   private SecretKey userSecretKey;
   private byte[] encryption;
   private String toEncrypt, decrypted;

    public void crypto(String message, SecretKey usersKey) throws NoSuchAlgorithmException, Exception {
        toEncrypt = message;
        CipherAES128 = Cipher.getInstance("AES");
        AESkey =  KeyGenerator.getInstance("AES");
        AESkey.init(128);
        userSecretKey = usersKey;
    }

    public byte[] Encryption() throws BadPaddingException, IllegalBlockSizeException, InvalidKeyException {
        CipherAES128.init(Cipher.ENCRYPT_MODE, userSecretKey);
        byte[] begin = toEncrypt.getBytes();
        encryption = CipherAES128.doFinal(begin);
        return encryption;
    }

    public String Decryption(byte[] toDecrypt) throws InvalidKeyException, BadPaddingException, IllegalBlockSizeException {
        CipherAES128.init(Cipher.DECRYPT_MODE, userSecretKey);
        decrypted = new String(CipherAES128.doFinal(toDecrypt));
        return decrypted;
    }
    
 }



}