package com.example.test;

import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;

public class crypto {
   private Cipher CipherAES128;
   private KeyGenerator AESkey;
   private SecretKey userSecretKey;
   private byte[] encryption;
   private String toEncrypt, decrypted;

    public crypto(String message, SecretKey usersKey) throws NoSuchAlgorithmException, Exception {
        toEncrypt = message;
        CipherAES128 = Cipher.getInstance("AES");
        AESkey =  KeyGenerator.getInstance("AES");
        AESkey.init(128);
        userSecretKey = usersKey;
    }

    public byte[] Encryption() throws BadPaddingException, IllegalBlockSizeException, InvalidKeyException {
        CipherAES128.init(Cipher.ENCRYPT_MODE, userSecretKey);
        byte[] begin = toEncrypt.getBytes();
        encryption = CipherAES128.doFinal(begin);
        return encryption;
    }

    public String Decryption(byte[] toDecrypt) throws InvalidKeyException, BadPaddingException, IllegalBlockSizeException {
        CipherAES128.init(Cipher.DECRYPT_MODE, userSecretKey);
        decrypted = new String(CipherAES128.doFinal(toDecrypt));
        return decrypted;
    }
}
