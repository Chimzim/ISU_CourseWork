package coms362.cards.slapjack;

import coms362.cards.abstractcomp.Move;
import coms362.cards.abstractcomp.Player;
import coms362.cards.abstractcomp.Rules;
import coms362.cards.abstractcomp.RulesDispatch;
import coms362.cards.abstractcomp.RulesDispatchBase;
import coms362.cards.abstractcomp.Table;
import coms362.cards.events.inbound.CardEvent;
import coms362.cards.events.inbound.ConnectEvent;
import coms362.cards.events.inbound.DealEvent;
import coms362.cards.events.inbound.Event;
import coms362.cards.events.inbound.EventUnmarshallers;
import coms362.cards.events.inbound.GameRestartEvent;
import coms362.cards.events.inbound.InitGameEvent;
import coms362.cards.events.inbound.NewPartyEvent;
import coms362.cards.events.inbound.SetQuorumEvent;
import coms362.cards.fiftytwo.CreatePlayerCmd;
import coms362.cards.fiftytwo.DealCommand;
import coms362.cards.fiftytwo.DropEventCmd;
import coms362.cards.fiftytwo.P52Move;
import coms362.cards.fiftytwo.PartyRole;
import coms362.cards.fiftytwo.SetQuorumCmd;
import coms362.cards.model.Card;
import coms362.cards.model.Pile;
import coms362.cards.model.Quorum;

public class SJRules extends RulesDispatchBase
implements Rules, RulesDispatch {
	
	public static final String DISCARD_PILE = "discardPile";
    public static final String PLAYER1_PILE = "player1Pile";
    public static final String PLAYER2_PILE = "player2Pile";
    public static final String PLAYER1_HAND = "player1Hand";
    public static final String PLAYER2_HAND = "player2Hand";
    public static final String PRIZE_PILE   = "prizePile";

    public boolean player1turn = true;

	
	public SJRules() {
		registerEvents();
	}
	
	/**
	 * Method for an init game event. Calls the init cmd for setup
	 * @return SJInitCmd
	 */
	public Move apply(InitGameEvent e, Table table, Player player) {
		return new SJInitCmd(table.getPlayerMap(), "SlapJack Multiplayer", table);
	}
	
	public Move apply(CardEvent e, Table table, Player player){	
		Pile fromPile, toPile;
		Card c;
		int playerNum = player.getPlayerNum();
		if(player.getPlayerNum() == 1) {
			fromPile = table.getPile(PLAYER1_PILE);
			toPile = table.getPile(PRIZE_PILE);
			c = fromPile.getCard(e.getId());
		}else {
			fromPile = table.getPile(PLAYER2_PILE);
			toPile = table.getPile(PRIZE_PILE);
			c = fromPile.getCard(e.getId());
		}
		if (c == null) {
			return new DropEventCmd();
		}
		//	return new SJMove(c, player, fromPile, toPile);
	    c = table.getPile(PRIZE_PILE).getCard(e.getId());
		if(c != null) {
			Pile prize = table.getPile(PRIZE_PILE);
			toPile = null;
			if(playerNum == 1) {
				
			}
			return new SJMove(c, player, prize, toPile);
		}
		
		if((playerNum == 1) && !player1turn) {
			return new DropEventCmd();
		}
		if((playerNum == 2) && (player1turn)) {
			return new DropEventCmd();
		}
		fromPile = table.getPile(PLAYER2_PILE);
		if(playerNum == 1) {
			fromPile = table.getPile(PLAYER1_PILE);
		}
		toPile = table.getPile(PRIZE_PILE);
		c = fromPile.getCard(e.getId());
		if (c == null) {
			return new DropEventCmd();
		}
		player1turn = !player1turn;
		return new SJMove(c, player, fromPile, toPile);		

	}
	
	
	public Move apply(DealEvent e, Table table, Player player){
		return new SJDealCommand(table, player);
	}
	
	@Override
	public Move eval(Event nextE, Table table, Player player) {
		return nextE.dispatch(this, table, player);
	}
	
	public Move apply(ConnectEvent e, Table table, Player player){
		Move rval = new DropEventCmd(); 
		System.out.println("Rules apply ConnectEvent "+e);
		if (! table.getQuorum().exceeds(table.getPlayers().size()+1)){
			if (e.getRole() == PartyRole.player){				
				rval =  new CreatePlayerCmd( e.getPosition(), e.getSocketId());
			}			
		}
		System.out.println("SlapjackRules connectHandler rval = "+rval);
		return rval;
	}
	
	@Override
    public Move apply(SetQuorumEvent e, Table table, Player player) {
        return new SetQuorumCmd(new Quorum(2, 2));
    }
	
	public Move apply(NewPartyEvent e, Table table, Player player){
		if (e.getRole() == PartyRole.player){
			return new CreatePlayerCmd( e.getPosition(), e.getSocketId());
		}
		return new DropEventCmd();
	}
	
	/**
	 * TODO update:
	 * Copied from P52rules.java
	 */
	private void registerEvents() {
		EventUnmarshallers handlers = EventUnmarshallers.getInstance();
		handlers.registerHandler(InitGameEvent.kId, (Class) InitGameEvent.class); 
		handlers.registerHandler(DealEvent.kId, (Class) DealEvent.class); 
		handlers.registerHandler(CardEvent.kId, (Class) CardEvent.class); 
		handlers.registerHandler(GameRestartEvent.kId, (Class) GameRestartEvent.class); 
		handlers.registerHandler(NewPartyEvent.kId, (Class) NewPartyEvent.class);
	}
}
